openapi: 3.0.3
info:
  title: Namhatta Management System API
  description: OpenAPI specification for Namhatta Management System - complete API documentation for Spring Boot migration compliance
  version: 1.0.0
  contact:
    name: Namhatta Management System
    email: support@namhatta.org

servers:
  - url: http://localhost:5000
    description: Development server (Node.js)
  - url: http://localhost:8080
    description: Spring Boot development server
  - url: https://api.namhatta.org
    description: Production server

security:
  - cookieAuth: []

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth_token

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin"
        password:
          type: string
          example: "Admin@123456"

    LoginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "admin"
            role:
              type: string
              enum: [ADMIN, OFFICE, DISTRICT_SUPERVISOR]
              example: "ADMIN"
            districts:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                    example: "321"
                  name:
                    type: string
                    example: "Purulia"

    # Core Entity Schemas
    Devotee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        legalName:
          type: string
          example: "John Doe"
        name:
          type: string
          example: "Radha Krishna Das"
        dob:
          type: string
          format: date
          example: "1990-05-15"
        phone:
          type: string
          example: "+91-9876543210"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          example: "MALE"
        bloodGroup:
          type: string
          example: "O+"
        maritalStatus:
          type: string
          enum: [SINGLE, MARRIED, DIVORCED, WIDOWED]
          example: "MARRIED"
        occupation:
          type: string
          example: "Software Engineer"
        fatherName:
          type: string
          example: "Robert Doe"
        motherName:
          type: string
          example: "Mary Doe"
        spouseName:
          type: string
          example: "Jane Doe"
        namhattaId:
          type: integer
          example: 1
        devotionalStatusId:
          type: integer
          example: 3
        shraddhakutirId:
          type: integer
          example: 1
        harinamInitiationDate:
          type: string
          format: date
          nullable: true
          example: "2020-08-15"
        pancharatrikInitiationDate:
          type: string
          format: date
          nullable: true
          example: "2022-03-20"
        initiatedName:
          type: string
          nullable: true
          example: "Bhakta Radha Krishna Das"
        devotionalCourses:
          type: array
          items:
            type: object
            properties:
              courseName:
                type: string
                example: "Bhagavad Gita Course"
              date:
                type: string
                format: date
                example: "2021-12-15"
              institute:
                type: string
                example: "ISKCON Kolkata"
        presentAddress:
          $ref: '#/components/schemas/Address'
        permanentAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T15:45:00Z"

    Namhatta:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "ISKCON Kolkata Namhatta"
        code:
          type: string
          example: "KOL001"
        secretary:
          type: string
          example: "Radha Krishna Das"
        assistantSecretary:
          type: string
          example: "Gauranga Das"
        president:
          type: string
          example: "Nityananda Das"
        vicePresident:
          type: string
          example: "Gopinath Das"
        malaSenapoti:
          type: string
          example: "Madhava Das"
        mahaChakraSenapoti:
          type: string
          example: "Govinda Das"
        chakraSenapoti:
          type: string
          example: "Krishna Das"
        upaChakraSenapoti:
          type: string
          example: "Hari Das"
        status:
          type: string
          enum: [PENDING_APPROVAL, APPROVED, REJECTED]
          example: "APPROVED"
        nagarKirtan:
          type: integer
          enum: [0, 1]
          example: 1
        bookDistribution:
          type: integer
          enum: [0, 1]
          example: 1
        chanting:
          type: integer
          enum: [0, 1]
          example: 1
        arati:
          type: integer
          enum: [0, 1]
          example: 1
        bhagwatPath:
          type: integer
          enum: [0, 1]
          example: 1
        address:
          $ref: '#/components/schemas/Address'
        devoteeCount:
          type: integer
          example: 25
        createdAt:
          type: string
          format: date-time
          example: "2024-01-10T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-25T11:30:00Z"

    Address:
      type: object
      required:
        - country
        - state
        - district
        - subDistrict
        - village
        - postalCode
      properties:
        country:
          type: string
          example: "India"
        state:
          type: string
          example: "West Bengal"
        district:
          type: string
          example: "Kolkata"
        subDistrict:
          type: string
          example: "Salt Lake"
        village:
          type: string
          example: "Sector V"
        postalCode:
          type: string
          example: "700091"
        landmark:
          type: string
          example: "Near City Centre Mall"

    DevotionalStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Harinam Diksha"
        level:
          type: integer
          example: 6

    Shraddhakutir:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Kolkata Shraddhakutir"
        district:
          type: string
          example: "Kolkata"

    NamhattaUpdate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        namhattaId:
          type: integer
          example: 1
        programType:
          type: string
          example: "Weekly Satsang"
        date:
          type: string
          format: date
          example: "2024-02-15"
        description:
          type: string
          example: "Weekly spiritual discussion and kirtan"
        specialAttraction:
          type: string
          example: "Guest speaker from ISKCON Mumbai"
        attendance:
          type: integer
          example: 45
        createdAt:
          type: string
          format: date-time
          example: "2024-02-10T14:20:00Z"

    # Response Schemas
    PaginatedDevotees:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Devotee'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 10
            totalItems:
              type: integer
              example: 253
            itemsPerPage:
              type: integer
              example: 10

    PaginatedNamhattas:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Namhatta'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 11
            totalItems:
              type: integer
              example: 101
            itemsPerPage:
              type: integer
              example: 10

    DashboardSummary:
      type: object
      properties:
        totalDevotees:
          type: integer
          example: 253
        totalNamhattas:
          type: integer
          example: 101
        recentUpdates:
          type: array
          items:
            $ref: '#/components/schemas/NamhattaUpdate'

    StatusDistribution:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "Harinam Diksha"
          count:
            type: integer
            example: 45
          percentage:
            type: number
            format: float
            example: 17.8

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "Authentication failed"

paths:
  # Authentication Endpoints
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: HTTP-only authentication cookie
              schema:
                type: string
                example: "auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Path=/; Max-Age=3600"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify authentication token
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Token invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/user-districts:
    get:
      tags:
        - Authentication
      summary: Get user's assigned districts
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User districts retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  districts:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "321"
                        name:
                          type: string
                          example: "Purulia"

  # Health Check
  /api/health:
    get:
      tags:
        - System
      summary: Health check
      responses:
        '200':
          description: System healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"

  /api/about:
    get:
      tags:
        - System
      summary: Application information
      responses:
        '200':
          description: Application info
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Namhatta Management System"
                  version:
                    type: string
                    example: "1.0.0"
                  description:
                    type: string
                    example: "OpenAPI spec for Namhatta web and mobile-compatible system"

  # Geographic Endpoints
  /api/countries:
    get:
      tags:
        - Geography
      summary: Get all countries
      responses:
        '200':
          description: List of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "India"

  /api/states:
    get:
      tags:
        - Geography
      summary: Get states by country
      parameters:
        - name: country
          in: query
          required: true
          schema:
            type: string
            example: "India"
      responses:
        '200':
          description: List of states
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "West Bengal"

  /api/districts:
    get:
      tags:
        - Geography
      summary: Get districts by state
      parameters:
        - name: state
          in: query
          required: true
          schema:
            type: string
            example: "West Bengal"
      responses:
        '200':
          description: List of districts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Kolkata"

  /api/sub-districts:
    get:
      tags:
        - Geography
      summary: Get sub-districts by district or pincode
      parameters:
        - name: district
          in: query
          schema:
            type: string
            example: "Kolkata"
        - name: pincode
          in: query
          schema:
            type: string
            example: "700091"
      responses:
        '200':
          description: List of sub-districts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Salt Lake"

  /api/villages:
    get:
      tags:
        - Geography
      summary: Get villages by sub-district and/or pincode
      parameters:
        - name: subDistrict
          in: query
          schema:
            type: string
            example: "Salt Lake"
        - name: pincode
          in: query
          schema:
            type: string
            example: "700091"
      responses:
        '200':
          description: List of villages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Sector V"

  /api/pincodes/search:
    get:
      tags:
        - Geography
      summary: Search pincodes with pagination
      parameters:
        - name: country
          in: query
          required: true
          schema:
            type: string
            example: "India"
        - name: search
          in: query
          schema:
            type: string
            example: "700"
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 25
      responses:
        '200':
          description: Paginated pincode search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  pincodes:
                    type: array
                    items:
                      type: string
                      example: "700091"
                  total:
                    type: integer
                    example: 150
                  hasMore:
                    type: boolean
                    example: true

  /api/address-by-pincode:
    get:
      tags:
        - Geography
      summary: Get address information by pincode
      parameters:
        - name: pincode
          in: query
          required: true
          schema:
            type: string
            example: "700091"
      responses:
        '200':
          description: Address information
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    type: string
                    example: "India"
                  state:
                    type: string
                    example: "West Bengal"
                  district:
                    type: string
                    example: "Kolkata"

  # Dashboard Endpoints
  /api/dashboard:
    get:
      tags:
        - Dashboard
      summary: Get dashboard summary
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Dashboard summary data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'

  /api/status-distribution:
    get:
      tags:
        - Dashboard
      summary: Get devotional status distribution
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Status distribution data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDistribution'

  # Devotee Endpoints
  /api/devotees:
    get:
      tags:
        - Devotees
      summary: Get paginated list of devotees with filtering
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: district
          in: query
          schema:
            type: string
        - name: statusId
          in: query
          schema:
            type: integer
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, createdAt]
            default: name
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Paginated list of devotees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDevotees'

    post:
      tags:
        - Devotees
      summary: Create a new devotee
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Devotee'
      responses:
        '201':
          description: Devotee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devotee'
        '400':
          description: Invalid devotee data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/devotees/{id}:
    get:
      tags:
        - Devotees
      summary: Get devotee by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Devotee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devotee'
        '404':
          description: Devotee not found

    put:
      tags:
        - Devotees
      summary: Update devotee
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Devotee'
      responses:
        '200':
          description: Devotee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devotee'
        '403':
          description: Access denied for district supervisors
        '404':
          description: Devotee not found

  /api/devotees/{id}/upgrade-status:
    post:
      tags:
        - Devotees
      summary: Upgrade devotee status
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newStatusId
              properties:
                newStatusId:
                  type: integer
                  example: 4
                notes:
                  type: string
                  example: "Completed required courses"
      responses:
        '200':
          description: Status updated successfully
        '403':
          description: Access denied
        '404':
          description: Devotee not found

  # Namhatta Endpoints
  /api/namhattas:
    get:
      tags:
        - Namhattas
      summary: Get paginated list of namhattas with filtering
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: district
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING_APPROVAL, APPROVED, REJECTED]
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
            default: name
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Paginated list of namhattas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNamhattas'

    post:
      tags:
        - Namhattas
      summary: Create a new namhatta
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namhatta'
      responses:
        '201':
          description: Namhatta created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namhatta'
        '409':
          description: Namhatta code already exists

  /api/namhattas/{id}:
    get:
      tags:
        - Namhattas
      summary: Get namhatta by ID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Namhatta details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namhatta'
        '404':
          description: Namhatta not found

    put:
      tags:
        - Namhattas
      summary: Update namhatta
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namhatta'
      responses:
        '200':
          description: Namhatta updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namhatta'

  /api/namhattas/{id}/approve:
    post:
      tags:
        - Namhattas
      summary: Approve namhatta
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Namhatta approved successfully
        '404':
          description: Namhatta not found

  /api/namhattas/{id}/reject:
    post:
      tags:
        - Namhattas
      summary: Reject namhatta
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Incomplete documentation"
      responses:
        '200':
          description: Namhatta rejected successfully
        '404':
          description: Namhatta not found

  # Status Management
  /api/statuses:
    get:
      tags:
        - Status Management
      summary: Get all devotional statuses
      responses:
        '200':
          description: List of devotional statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DevotionalStatus'

    post:
      tags:
        - Status Management
      summary: Create new devotional status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevotionalStatus'
      responses:
        '201':
          description: Status created successfully

  # Shraddhakutirs
  /api/shraddhakutirs:
    get:
      tags:
        - Shraddhakutirs
      summary: Get shraddhakutirs by district
      parameters:
        - name: district
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of shraddhakutirs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shraddhakutir'

tags:
  - name: Authentication
    description: User authentication and session management
  - name: System
    description: System health and information
  - name: Geography
    description: Geographic data and location services
  - name: Dashboard
    description: Dashboard and analytics
  - name: Devotees
    description: Devotee management operations
  - name: Namhattas
    description: Namhatta center management
  - name: Status Management
    description: Devotional status management
  - name: Shraddhakutirs
    description: Shraddhakutir management